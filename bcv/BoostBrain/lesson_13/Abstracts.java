package lesson_13;

/*
1. Абстрактный класс - класс из которого нельзя создать экземпляр
2. Единственный способ использовать абстрактный класс - создать класс-потомок
3. Абстрактные классы применяют тогда, когда у родственных классов одна часть методов одинаковые, а другая отличается. Те методы, котрые совпадают - можно реализовать в базовом абстрактном классе, а те, которые отличаются - реализовать в классах потомках.
Например: фигура - это абстарктная сущность; круг или квадрат - конкретная сущность; если считать площадь - она вычисляется разными формулами, но с другой стороны цвет фигуры может быть реализован одним и тем же методом. Поэтому вывод цвета можно вывести в базовый абстрактный класс, а метод вычисления площади - в класс потомок
4. Абстрактные классы могут содержать абстрактные методы. Это такие методы, для которых есть только определение, но нет наполнения (ничего в фигурных скобках). Это способ заставить реализовать эти методы в классах-потомках.
*/

import java.util.ArrayList;

public class Abstracts {
    public static void main(String[] args) {
	//для того чтобы вызвать метод printShapes создаем список 
	ArrayList<Shape> shapes = new ArrayList<>();
	Shape shape = new Circle(2);
	//нельзя создавать экземпляры интерфейса. Поэтому создаем класс Circle. Определяем фигуру и ее параметры. Круг является фигурой и наследуется от интерфейса Shape
	// Shape shape = new Circle(1, "Red");
	//добавляем вновь созданую фигуру в список фигур
	shapes.add(shape);
	
	//вместо верхних двух строк можно добавить фигуру способом ниже
	//2 убираем со всех конструкторов значения цветов
	shapes.add(new Rectangle(2, 3));
	// shapes.add(new Rectangle(1, 1, "Blue"));
	
	//выводим фигуры на экран
	printShapes(shapes);
    }
//создаем метод, который принимает список фигур
    public static void printShapes(ArrayList<Shape> shapes) {
	//с помощью цилка выводим в консоль данные каждой фигуры
	for (Shape shape : shapes) {
	    System.out.println("Name: " + shape.getName());
	    System.out.println("Square: " + shape.getSquare());
	    // System.out.println("Color: " + shape.getColor());
	}
    }
}

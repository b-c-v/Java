package com.bcv.BoostBrain.lesson_10;
/*
Файлы
1. Файл - именованная область на файловом носителе.
2. Папка, каталог, директория - это тоже файл, но особого рода.
3. Обычный файл содержит в себе набор байт или ничего.
4. Папка, каталог, директория - содержит в себе список файлов или ничего.
5. Полное имя файла кроме имени содержит полный путь к файлу.
6. Если использовать краткое имя файла, то используется текущий каталог.

Классы для работы с файлами
1. В Java для получения информации о файле используется класс File.
2. Для чтения из файла используется класс FileInputStream.
3. Для записи в файл используется класс FileOutputStream.

Информация о файлах и директориях
1. Проверка файла на существование - exists()
2. Проверка является ли файл каталогом - isDirectory() & isFile()
3. Список файлов в директории - list()
4. Размер файла - length()
5. Проверка возможности чтения/записи - сапRеаd()/canWrite()

Чтение из файла
1. Для чтения из файла используется класс FilelnputStream.
2. Чтобы прочесть данные из файла, надо создать объект типа FilelnputStream и передать ему имя файла или объект типа File
3. Чтобы узнать количество байт, доступных для чтения, используется метод available()
4. Чтение из файла производится методом read в трех разных вариантах - по одному байту, массивом или массивом с указанием начальной и конечной позиций

Запись в файл
1. Для записи в файл используется класс FileOutputStream
2. Чтобы записать данные в файл, надо создать объект типа FileOutputStream и передать ему имя файла или объект типа File
3. Кроме имени файла или объекта типа File, можно указать специальный параметр, означающий, что мы хотим записывать данные в конец файла
4. Запись в файл производится методом write в в трех разных вариантах - по одному байту, массивом или массивом с указанием начальной и конечной позиций
5. ВАЖНО! После того, как мы завершили запись в файл, его необоходимо закрыть
*/
//для того начать работать с классом файл - его нужно импортировать
import java.io.File;

//2 для того чтобы прочитать содержимое файла имортируем класс
import java.io.FileInputStream;

//3 импортируем класс исключения

//4 импортируем класс исключения
import java.io.IOException;

import java.io.FileOutputStream;


public class Files {
//3 добавляем исключения trhows FileNotFoundException, IOException
    public static void main(String[] args) throws IOException {
	
	
//создаем объект файла, который соответствует нашему текущему каталогу. В качестве имени указываем точку (т.е. принятое обозначение текущего каталога)
	File dir = new File(".");
	
//для просмотра содержимого каталоги используется метод list, который возращаем массив строк
	String[] names = dir.list();
	
// создаем цикл, который проходит по всему массиву names и выводим все имена из массива. Т.е. выводым содержимое текущего каталога
	for (int i = 0; i < names.length; i++) {
	    System.out.println("Содержимое каталога " +names[i]);
	}
	
//получаем информацию о файле lesson10.txt. Создаем объект типа file.
	File file = new File("lesson10.txt");
//выводим длину файла с помощью метода .length, который возвращает значение типа long
	System.out.println("Длина файла " + file.length());

//2 читаем файл. Используем класс FileInputStream (импортируем его). Создаем объект класса FileInputStream с именем input. В качестве входящего параметра указываем file длину которого вычисляли
//3 для того чтобы код работал надо добавить исключение FileNotFoundException
	FileInputStream input = new FileInputStream(file);
//проверяем сколько байт доступно для чтения и выводим на экран. Создаем переменную length и присвоем ей то, что возвращает метод available
//4 для того чтобы кода работа надо добавить исключение java.io.IOException
	int length = input.available();
		System.out.println("Читаем файл " +length);

//прочитаем данные файла. Создаем массив byte с именем data длиной length
	byte[] data = new byte[length];
//вызываем метод read и указываем массив data в который надо прочитать эти данные
	input.read(data);
//создаем цикл в котором проходим весь массив с именем data и выводим все значения
	for (int i = 0; i < data.length; i++) {
	System.out.println("Содержимое файла " +data[i]);

//преобразовываем байтовый массив в текст и выводим
//создаем объект типа String с именем text с помощью конструктора new типа String принимающего байтовый массив.
	    String text = new String(data);
	    System.out.println("Текст в файле: " + text);

//пример внесение записи в файл. Создаем объект класса FileOutputStream (импортируем его) в качестве параметров передаем объект типа file. Параметр true необходим, чтобы файл не переписывался а заполнялся.
	    FileOutputStream output = new FileOutputStream(file, true);
	    String newText = "Hello world files";
//преобразовываем объект типа String в байтовый массив с помощью метода getBytes(), который возвращает массив байтов
//создаем массив с именем newTextBytes
	    byte[] newTextBytes = newText.getBytes();
//берем объект и записываем туда новый массив newTextBytes
	    output.write(newTextBytes);
//закрываем файл после записи
	    output.close();
	}
    }

}

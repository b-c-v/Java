Практическое занятие №2 (задание 4)
_______________________

Замечание. Запрещено использовать любые типы из пакета java.util, кроме двух:
1) java.util.Iterator
2) java.util.NoSuchElementException

_______________________

0. Создать и расположить в корневом пакете (ua.nure.your_last_name.practice2) интерфейс Container:

-----------------------------
package ua.nure.your_last_name.practice2;

public interface Container extends Iterable<Object> {
	
	// Removes all of the elements.
	void clear();

	// Returns the number of elements.
	int size();
	
	// Returns a string representation of this container.
	String toString();

	// Returns an iterator over elements.
	// Iterator must implements the remove method.
	Iterator<Object> iterator();

}
-----------------------------

1. Создать интерфейс List следующего содержания:

-----------------------------
package ua.nure.your_last_name.practice2

public interface List extends Container {

	// Inserts the specified element at the beginning.
	void addFirst(Object element);

	// Appends the specified element to the end.
	void addLast(Object element);

	// Removes the first element.
	void removeFirst();

	// Removes the last element.
	void removeLast();

	// Returns the first element.
	Object getFirst();

	// Returns the last element.
	Object getLast();

	// Returns the first occurrence of the specified element.
	// Returns null if no such element.
	// (use 'equals' method to check an occurrence)
	Object search(Object element);

	// Removes the first occurrence of the specified element.
	// Returns true if this list contained the specified element. 
	// (use 'equals' method to check an occurrence)
	boolean remove(Object element);

}
-----------------------------

2. Создать класс ListImpl, который реализует интерфейс List.

Хранение объектов внутри контейнера реализовать с помощью совокупности узлов - экземпляров класса Node.
Каждый узел хранит объект и ссылку на следующий узел.
Класс Node должен быть определен внутри класса ListImpl (является вложенным static классом).

Метод iterator должен возвращать экземпляр класса IteratorImpl, который реализует интерфейс java.util.Iterator<Object>.
Класс IteratorImpl должен быть определен внутри класса ListImpl (является внутренним классом).

Если в контейнер были добавлены с помощью метода addLast три элемента A, B, C, то:
1) метод toString должен возвращать строку "[A, B, C]"
2) порядок обхода элементов контейнера итератором: A B C

3. В классе ListImpl создать метод main, в котором продемонстрировать работу:
1) всех методов интерфейса List (включая унаследованные от Container и Iterable);
2) всех методов интерфейса Iterator (hasNext/next/remove).

_______________________

Замечания.
1. Результат должен быть представлен в виде проекта с именем Practice2.
2. Корневой пакет для всех классов: ua.nure.your_last_name.practice2

_______________________

Вопросы.
1. Что такое перекрытие, перегрузка, сокрытие метода.
2. Что такое наследование, ключевые слова implements, extends.
3. Какие типы не могут быть наследованы?
4. Ограничения при перекрытии метода.
5. Что такое инкапсуляция, для чего она предназначена, как ее реализовать.
6. Контексты использования ключевого слова final.
7. Порядок вызова конструкторов, блоков инициализации при создании объекта.
8. Анонимные классы.
9. В чем отличие вложенных классов от внутренних.



=================================================
=================================================

Нижеследующий класс может быть использован для тестирования основного кода.
Необходимо вписаться в тесты.


-----------------------------
package ua.nure.your_last_name.practice2;

import java.util.Iterator;

public class ListTests {

	public static void main(String[] args) {
		test1();
	}

	private static void test1() {

		List list = new ListImpl();
		Class c = list.getClass();

		// must be 1
		System.out.println(c.getInterfaces().length);

		// must be List
		System.out.println(c.getInterfaces()[0].getSimpleName());

		// must be java.lang.Object
		System.out.println(c.getSuperclass().getName());

		// must be 1
		System.out.println(c.getInterfaces()[0].getInterfaces().length);

		// must be Container
		System.out.println(c.getInterfaces()[0].getInterfaces()[0].getSimpleName());

		// must be 1
		System.out.println(c.getInterfaces()[0].getInterfaces()[0].getInterfaces().length);

		// must be java.lang.Iterable
		System.out.println(c.getInterfaces()[0].getInterfaces()[0].getInterfaces()[0].getName());

		/* an output must be as the following:
		*************************************
		1
		List
		java.lang.Object
		1
		Container
		1
		java.lang.Iterable
		*************************************
		*/
	}

	private static void test2() {

		List list = new ListImpl();
		list.addLast("A");
		list.addLast("B");
		list.addLast("C");

		System.out.println(list);
		System.out.println(list.size());

		list.clear();
		System.out.println(list);
		System.out.println(list.size());

		list.addLast("A");
		list.addLast("B");
		list.addLast("C");

		System.out.println(list);
		System.out.println(list.size());

		/* an output must be as the following:
		*************************************
		[A, B, C]
		3
		[]
		0
		[A, B, C]
		3
		*************************************
		*/
	}

	private static void test3() {

		List list = new ListImpl();
		list.addFirst("A");
		list.addLast("B");
		list.addFirst("C");

		System.out.println(list);
		System.out.print(list.getFirst());
		System.out.print(list.getLast());

		/* an output must be as the following:
		*************************************
		[C, A, B]
		CB
		*************************************
		*/
	}

	private static void test4() {

		List list = new ListImpl();
		list.addFirst("c");
		list.addFirst("b");
		list.addFirst("a");
		list.addLast("A");
		list.addLast("B");
		list.addLast("C");

		System.out.println(list);

		/* an output must be as the following:
		*************************************
		[a, b, c, A, B, C]
		*************************************
		*/
	}

	private static void test5() {

		List list = new ListImpl();
		list.addLast("A");
		list.addLast("B");
		list.addLast("C");

		for (Object element : list) {
			System.out.print(element);
		}

		/* an output must be as the following:
		*************************************
		ABC
		*************************************
		*/
	}

	private static void test6() {

		List list = new ListImpl();
		list.addLast("A");
		list.addLast("B");
		list.addLast("C");

		Iterator it = list.iterator();
		while (it.hasNext()) {
			System.out.print(it.next());
		}
		System.out.println();
		it = list.iterator();
		while (it.hasNext()) {
			System.out.print(it.next());
		}

		/* an output must be as the following:
		*************************************
		ABC
		ABC
		*************************************
		*/
	}

	private static void test7() {

		List list = new ListImpl();
		list.addLast("A");
		list.addLast("B");
		list.addLast("C");

		Iterator it = list.iterator();
		System.out.println(it.next());
		it.remove();
		System.out.println(it.next());
		it.remove();
		System.out.println(it.next());
		it.remove();
		System.out.println(list);

		/* an output must be as the following:
		*************************************
		A
		B
		C
		[]
		*************************************
		*/
	}

	private static void test8() {

		List list = new ListImpl();
		list.addLast("A");
		list.addFirst("B");
		list.addLast("C");

		Iterator it = list.iterator();

		System.out.println(it.next());
		System.out.println(it.next());
		System.out.println(it.next());
		it.remove();
		System.out.println(list);

		it = list.iterator();

		System.out.println(it.next());
		it.remove();
		System.out.println(list);

		it = list.iterator();

		System.out.println(it.next());
		it.remove();
		System.out.println(list);

		/* an output must be as the following:
		*************************************
		B
		A
		C
		[B, A]
		B
		[A]
		A
		[]
		*************************************
		*/
	}

	private static void test9() {

		List list = new ListImpl();
		list.addLast("A");
		list.addLast("B");
		list.addLast("C");

		Iterator it = list.iterator();
		System.out.println(it.next());
		it.remove();
		try {
			it.remove();
		} catch (IllegalStateException ex) {
			System.out.println("exception");
		}

		/* an output must be as the following:
		*************************************
		A
		exception
		*************************************
		*/
	}

	private static void test10() {

		List list = new ListImpl();
		list.addLast("A");
		list.addLast("B");
		list.addLast("C");

		Iterator it = list.iterator();
		try {
			it.remove();
		} catch (IllegalStateException ex) {
			System.out.println("exception");
		}

		/* an output must be as the following:
		*************************************
		exception
		*************************************
		*/
	}

	private static void test11() {

		List list = new ListImpl();
		list.addFirst("B");
		list.addLast("C");
		list.addFirst("A");

		System.out.println(list);

		list.removeFirst();
		System.out.println(list);

		list.removeFirst();
		System.out.println(list);

		/* an output must be as the following:
		*************************************
		[A, B, C]
		[B, C]
		[C]
		*************************************
		*/
	}

	private static void test12() {

		List list = new ListImpl();
		list.addFirst("B");
		list.addLast("C");
		list.addFirst("A");

		System.out.println(list);

		list.removeLast();
		System.out.println(list);

		list.removeLast();
		System.out.println(list);

		/* an output must be as the following:
		*************************************
		[A, B, C]
		[A, B]
		[A]
		*************************************
		*/
	}

	private static void test13() {

		List list = new ListImpl();
		list.addFirst("B");
		list.addLast("C");
		list.addFirst("A");

		System.out.println(list);
		System.out.println(list.getFirst());
		System.out.println(list.getLast());

		/* an output must be as the following:
		*************************************
		[A, B, C]
		A
		C
		*************************************
		*/
	}

	private static void test14() {

		List list = new ListImpl();
		list.addFirst(3);
		list.addFirst(2);
		list.addFirst(1);

		System.out.println(list);
		System.out.println(list.search(1));
		System.out.println(list.search(2));
		System.out.println(list.getLast());

		/* an output must be as the following:
		*************************************
		[1, 2, 3]
		1
		2
		3
		*************************************
		*/
	}

	private static void test15() {

		List list = new ListImpl();
		list.addLast(1);
		list.addLast(2);
		list.addLast(1);

		list.remove(1);
		System.out.println(list);

		list.remove(2);
		System.out.println(list);

		Iterator it = list.iterator();
		System.out.println(it.next());

		/* an output must be as the following:
		*************************************
		[2, 1]
		[1]
		1
		*************************************
		*/
	}

}
-----------------------------

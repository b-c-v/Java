package com.bcv.lessons.BoostBrain.lesson_7;
/*Принципы ООП.
1. Наследование - это конструирование нового класса на основе уже существующего.
2. Инкапсуляция - это способ скрыть сложное устройство класса, с целью упростить использование или обезопасить от неправильного
использования.
3. Полиморфизм - выражается в двух условиях: первое - это возможность обращаться с классом-наследником как с предком, второе - это
способность класса-наследника изменять поведение предка.

Видимость - это правила, которые определяют, из каких частей программы можно обратиться к переменной или методу.

Видимость локальных переменных
1. Локальной переменной называется переменная, определенная внутри метода.
2. Локальная переменная видна внутри блока текста, ограниченного фигурными скобками. Обычно это тело метода, условия^) или цикла (for, while).

Модификаторы
1. Модификаторы доступа - это ключевые слова, которые указывают из каких частей программы можно получить доступ к переменным или методам.
2. Всего модификаторов доступа 4:
a. public - публичный, видимый отовсюду
b. protected - защищенный, видимый только потомкам
c. private - приватный, видимый только изнутри класса
d. default, package-private - по умолчанию, видимый изнутри всех классов одного пакета
*/

public class OOP {
    public static void main(String[] args) {

	// создаем экземпляр класса собака и кошка
//Dog dog = new Dog();
//Cat cat = new Cat();

	// 3 полиморфиз - вместо класса dog вписываем класс animal. Экземпляр dog и cat являются потомками класса animal
	Animal dog = new Dog();
	Animal cat = new Cat();
	
	
	// в классе собака и кошка появилась переменная name, хотя классы пусты
	// dog.name = "Krepish";
	// cat.name = "Belka";
	// System.out.println(dog.name);
	// System.out.println(cat.name);

	// 2 если в классе Animal изменить доступ к переменной name на private, тогда выдаст ошибку, что такой переменой не существует
	// 2 обращаемся к переменной name не напрямую т.к. она private, а через метод установки имени
	dog.setName("Sharik");
	cat.setName("Belka");
	System.out.println(dog.getName());
	System.out.println(cat.getName());
	
	//3 вызываем голоса животных
	System.out.println(dog.voice());
	System.out.println(cat.voice());
	

    }
}
